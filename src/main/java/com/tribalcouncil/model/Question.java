package com.tribalcouncil.model;

// Generated 21 Jan 2015 11:44:18 AM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Question generated by hbm2java
 */
@Entity
@Table(name = "question", catalog = "tribalcouncil", uniqueConstraints = @UniqueConstraint(columnNames = "question"))
public class Question implements java.io.Serializable {

	private Integer id;
	private Date closedate;
	private String question;
	private Set<Response> responses = new HashSet<Response>(0);
	private Set<Answer> answers = new HashSet<Answer>(0);

	public Question() {
	}

	public Question(Date closedate, String question, Set<Response> responses,
			Set<Answer> answers) {
		this.closedate = closedate;
		this.question = question;
		this.responses = responses;
		this.answers = answers;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "closedate", length = 19)
	public Date getClosedate() {
		return this.closedate;
	}

	public void setClosedate(Date closedate) {
		this.closedate = closedate;
	}

	@Column(name = "question", unique = true)
	public String getQuestion() {
		return this.question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "question", cascade = CascadeType.ALL)
	public Set<Response> getResponses() {
		return this.responses;
	}

	public void setResponses(Set<Response> responses) {
		this.responses = responses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "question", cascade = CascadeType.ALL)
	public Set<Answer> getAnswers() {
		return this.answers;
	}

	public void setAnswers(Set<Answer> answers) {
		this.answers = answers;
	}

}
